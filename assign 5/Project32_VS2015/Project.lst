Microsoft (R) Macro Assembler Version 14.10.25019.0	    05/28/17 16:34:43
"Assignment 2     (assignment2.asm			     Page 1 - 1


				TITLE Assignment 2     (assignment2.asm)

				; Author: Dat Pham
				; Course CS 271 / Project ID          Date: 5/25/2017
				; Description: Write a program get list random number and sort list number



				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			LOWER   = 10
 = 000000C8			UPPER	= 200
 = 000000C8			SIZEARRAY = 200
 = 000003E7			MAX = 999
 = 00000064			MIN = 100
 = 0000000A			NUMBERROW = 10
 00000000			.data

 00000000 00000000		many				DWORD	?	
 00000004 00000000		median				DWORD	?
 00000008 00000000		save				DWORD	?
 0000000C 00000000		num 				DWORD	?
 00000010 0000000A		counterRow			DWORD	10
 00000014  000000C8 [		arrayNumber			DWORD SIZEARRAY DUP(?)
	    00000000
	   ]

 00000334 53 6F 72 74 69	title1				BYTE			"Sorting Random Integers		Programmed by Dat Pham",0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 09 09
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 44
	   61 74 20 50 68
	   61 6D 00
 00000364 54 68 69 73 20	title2				BYTE			"This program generates random numbers in the range [100 .. 999],",0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 00
 000003A5 64 69 73 70 6C	title3				BYTE			"display the original list,sorts the list, and calculates the",0
	   61 79 20 74 68
	   65 20 6F 72 69
	   67 69 6E 61 6C
	   20 6C 69 73 74
	   2C 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 61 6E 64
	   20 63 61 6C 63
	   75 6C 61 74 65
	   73 20 74 68 65
	   00
 000003E2 6D 65 64 69 61	title4				BYTE			"median value. Finally, it displays the list sorted in descending order.",0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00

 0000042A 48 6F 77 20 6D	input				BYTE			"How many numbers should be generated? [10 .. 200]: ",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 0000045E 49 6E 76 61 6C	output1				BYTE			"Invalid input",0
	   69 64 20 69 6E
	   70 75 74 00
 0000046C 54 68 65 20 75	output2				BYTE			"The unsorted random numbers: ",0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 0000048A 54 68 65 20 6D	output3				BYTE			"The median is ",0
	   65 64 69 61 6E
	   20 69 73 20 00
 00000499 54 68 65 20 73	output4				BYTE			"The sorted list: ",0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 000004AB 20 20 20 20 00	space				BYTE			"    ",0
							

 00000000			.code


 00000000			main PROC

				;call introduction
 00000000  E8 000000AC				call Introduction;

				;call getdata 
 00000005  E8 00000000 E			call CrLf
 0000000A  68 00000000 R			push OFFSET many
 0000000F  E8 000000DA				call GetData
 00000014  E8 00000000 E			call CrLf
 00000019  E8 00000000 E			call CrLf

				;Get random number and push to array number
 0000001E  68 00000014 R			push OFFSET arrayNumber
 00000023  FF 35 00000000 R			push many
 00000029  E8 00000108				call AddArray
						
				;Display array number before sort
 0000002E  BA 0000046C R			mov  edx, OFFSET output2
 00000033  E8 00000000 E			call WriteString
 00000038  E8 00000000 E			call CrLf
 0000003D  68 00000014 R			push OFFSET arrayNumber
 00000042  FF 35 00000000 R			push many
 00000048  E8 00000111				call DisplayList
 0000004D  E8 00000000 E			call CrLf
 00000052  E8 00000000 E			call CrLf

				;Sort array of number
 00000057  68 00000014 R			push OFFSET arrayNumber
 0000005C  FF 35 00000000 R			push many
 00000062  E8 00000137				call SortList

				;Display Median
 00000067  E8 00000000 E			call CrLf
 0000006C  68 00000014 R			push OFFSET arrayNumber
 00000071  FF 35 00000000 R			push many
 00000077  E8 0000017F				call DisplayMedian

				;Display array number after sort
 0000007C  E8 00000000 E			call CrLf
 00000081  E8 00000000 E			call CrLf
 00000086  BA 00000499 R			mov  edx, OFFSET output4
 0000008B  E8 00000000 E			call WriteString
 00000090  E8 00000000 E			call CrLf
 00000095  68 00000014 R			push OFFSET arrayNumber
 0000009A  FF 35 00000000 R			push many
 000000A0  E8 000000B9				call DisplayList
 000000A5  E8 00000000 E			call CrLf

				exit
 000000AA  6A 00	   *	    push   +000000000h
 000000AC  E8 00000000 E   *	    call   ExitProcess
 000000B1			main ENDP



				;**********************************************************************************************
				;**									INTRODUCTION PROCEDURE
				;**
				;** Description		  : Display assignment information of program 5	 
				;** Preconditions	  : title1, title2, title3, title4 should be set to strings data type
				;** Registers Changed : edx
				;** Returns			  : don't have return
				;**
				;***********************************************************************************************



 000000B1			Introduction PROC

					; Display name of program and my name 
 000000B1  BA 00000334 R		mov		 edx, OFFSET title1			;line 1
 000000B6  E8 00000000 E		call	 WriteString
 000000BB  E8 00000000 E		call	 CrLf

					; Display assignment instruction
 000000C0  BA 00000364 R		mov		edx, OFFSET title2			;line 2
 000000C5  E8 00000000 E		call	WriteString
 000000CA  E8 00000000 E		call	 CrLf

 000000CF  BA 000003A5 R		mov		edx, OFFSET title3			;line 3
 000000D4  E8 00000000 E		call	WriteString
 000000D9  E8 00000000 E		call	 CrLf

 000000DE  BA 000003E2 R		mov		edx, OFFSET title4			;line 4
 000000E3  E8 00000000 E		call	WriteString
 000000E8  E8 00000000 E		call	CrLf

 000000ED  C3				ret

 000000EE			introduction ENDP

				;*************************************************************************
				;**							GETDATA PROCEDURE
				;**
				;** Description		  : Function will get value from user and save.
				;** Preconditions	  :	many variable should be DWORD
				;** Receives		  : get many variable, LOWER and UPPER constant 
				;** Registers Changed : edx, eax
				;** Returns			  :	Enter value to many variable
				;**
				;*************************************************************************

 000000EE			GetData PROC

 000000EE  55				push ebp
 000000EF  8B EC			mov	 ebp, esp
 000000F1  8B 5D 08			mov	 ebx, [ebp + 8] ; get address of many variable into ebx    

 000000F4				EnterNumberLoop:

						;Enter number
 000000F4  BA 0000042A R			mov	edx, OFFSET input
 000000F9  E8 00000000 E			call WriteString
 000000FE  E8 00000000 E			call ReadInt
						
 00000103  A3 0000000C R			mov	num, eax
 00000108  89 03				mov [ebx], eax		;save number
 0000010A  81 3D 0000000C R			cmp	num, UPPER		;check number with upper >200
	   000000C8
 00000114  7F 0B				jg	Error
 00000116  83 3D 0000000C R			cmp	num, LOWER		;check number with lower < 10
	   0A
 0000011D  72 02				jb	Error
 0000011F  EB 11				jmp	Next
						
 00000121				Error:
 00000121  BA 0000045E R			mov	edx, OFFSET output1
 00000126  E8 00000000 E			call WriteString
 0000012B  E8 00000000 E			call CrLf
 00000130  EB C2				jmp	EnterNumberLoop
					
 00000132				Next:
 00000132  5D					pop ebp
 00000133  C2 0004			ret 4 ;
 00000136			getData ENDP


				;************************************************************************
				;**						FILLARRAY PROCEDURE
				;**
				;** Description			: Add random number to array
				;** Receives			: arraynumber and number many user enter 
				;** Returns				: don't return
				;** Preconditions		: Array should be between 10 and 200
				;** Registers Changed	: eci,eax,ebx.ecx
				;**
				;*************************************************************************

 00000136			AddArray PROC

 00000136  55				push ebp
 00000137  8B EC			mov  ebp, esp
 00000139  8B 75 0C			mov  esi, [ebp + 12]		; get address of array    
 0000013C  8B 4D 08			mov	 ecx, [ebp + 8]   

 0000013F				AddLoop:
 0000013F  B8 000003E7				mov	eax, MAX		;Make random 0 to 999
 00000144  BB 00000064				mov	ebx, MIN
 00000149  2B C3				sub	eax, ebx		;Make random 100 to 999
 0000014B  E8 00000000 E			call RandomRange
 00000150  83 C0 64				add	eax, MIN		
 00000153  89 06				mov	[esi], eax		; save into array
 00000155  83 C6 04				add	esi, 4			
 00000158  E2 E5				loop AddLoop

 0000015A  5D				pop  ebp
 0000015B  C2 0008			ret  8

 0000015E			AddArray ENDP


				;************************************************************************
				;**						DISPLAYLIST PROCEDURE
				;**
				;** Description			: display element value to user
				;** Receives			: arrayNumber and many variable form main
				;** Returns				: don't return
				;** Preconditions		: many should have value between 10 and 200
				;** Registers Changed	: ebx,eax,ecx,edx
				;**
				;*************************************************************************

 0000015E			DisplayList PROC
 0000015E  55				push ebp
 0000015F  8B EC			mov  ebp, esp
 00000161  BB 00000001			mov	 ebx, 1			  
 00000166  8B 75 0C			mov  esi, [ebp + 12] 
 00000169  8B 4D 08			mov	 ecx, [ebp + 8]  

 0000016C				DisplayLoop:
 0000016C  8B 06				mov	eax, [esi]			; copy current element to eax
 0000016E  E8 00000000 E			call WriteDec
 00000173  BA 000004AB R			mov	edx, OFFSET space
 00000178  E8 00000000 E			call WriteString
 0000017D  83 FB 0A				cmp	ebx, NUMBERROW		; check enough 10 element for one line
 00000180  74 08				je	DropLine
 00000182  43					inc	ebx
 00000183  83 C6 04				add	esi, 4				; move address for next element
 00000186  E2 E4				loop DisplayLoop
 00000188  EB 10				jmp Next
 0000018A				DropLine:
 0000018A  E8 00000000 E			call CrLf
 0000018F  BB 00000000				mov	ebx,0
 00000194  43					inc	ebx
 00000195  83 C6 04				add	esi, 4				; move address for next element
 00000198  E2 D2				loop DisplayLoop
 0000019A				Next:
 0000019A  5D				pop	 ebp
 0000019B  C2 0008			ret	 8
 0000019E			DisplayList ENDP




				;************************************************************************
				;**						SORTLIST PROCEDURE
				;**
				;** Description			: sort array number 
				;** Receives			: arrayNumber and many variable form main
				;** Returns				: don't return
				;** Preconditions		: many should have value between 10 and 200
				;** Registers Changed	: ebx,eax,ecx,edx
				;**
				;*************************************************************************
				
 0000019E			SortList PROC
 0000019E  55				push ebp
 0000019F  8B EC			mov  ebp, esp
 000001A1  8B 75 0C			mov  esi, [ebp + 12]			
 000001A4  8B 4D 08			mov	 ecx, [ebp + 8]				
 000001A7  49				dec	 ecx
				
 000001A8				OutsideLoop:
 000001A8  8B 06				mov	eax, [esi]			
 000001AA  8B D6				mov	edx, esi
 000001AC  51					push ecx		
						
 000001AD					InsideLoop:
 000001AD  8B 1A					mov	ebx, [edx]			
 000001AF  8B 46 04					mov	eax, [esi+4]
 000001B2  3B D8					cmp	ebx, eax
 000001B4  7C 07					jl	Swap				;continue if greater
 000001B6  83 C6 04					add	esi,4
 000001B9  E2 F2					loop InsideLoop
 000001BB  EB 13					jmp Next
				
 000001BD					Swap:
 000001BD  83 C6 04					add	esi, 4				;swap two element
 000001C0  56						push esi
 000001C1  52						push edx
 000001C2  51						push ecx
 000001C3  E8 00000014					call Exchange
 000001C8  83 EE 04					sub	esi, 4
 000001CB  83 C6 04					add	esi,4
 000001CE  E2 DD					loop InsideLoop
				
 000001D0					Next:
 000001D0  59						pop	ecx 			
 000001D1  8B F2					mov	esi, edx		
						
 000001D3  83 C6 04					add	esi, 4				;next number
 000001D6  E2 D0					loop OutsideLoop
				
 000001D8  5D				pop	ebp
 000001D9  C2 0008			ret	8
 000001DC			SortList ENDP
				
				;************************************************************************
				;**						EXCHANGE PROCEDURE
				;**
				;** Description			: swap two value together
				;** Receives			: arrayNumber and many variable form main
				;** Returns				: don't return
				;** Preconditions		: many should have value between 10 and 200
				;** Registers Changed	: ebx,eax,ecx,edx
				;**
				;*************************************************************************
				
 000001DC			Exchange PROC
 000001DC  55				push ebp
 000001DD  8B EC			mov	ebp, esp
 000001DF  60				pushad
				
 000001E0  8B 5D 10			mov	ebx, [ebp + 16]				;second number
 000001E3  8B 45 0C			mov	eax, [ebp + 12]				;first number
 000001E6  8B D3			mov	edx, ebx
 000001E8  2B D0			sub	edx, eax	
					
 000001EA  8B 08			mov	ecx, [eax]
 000001EC  8B 1B			mov	ebx, [ebx]
 000001EE  8B F0			mov	esi, eax
 000001F0  89 1E			mov	[esi], ebx  
 000001F2  03 F2			add	esi, edx
 000001F4  89 0E			mov	[esi], ecx
				
 000001F6  61				popad
 000001F7  5D				pop	ebp
 000001F8  C2 000C			ret	12
 000001FB			Exchange ENDP

				;************************************************************************
				;**						DisplayMedian PROCEDURE
				;**
				;** Description			: Calculate and show Median of array number
				;** Receives			: arrayNumber and many variable form main
				;** Returns				: don't return
				;** Preconditions		: many should have value between 10 and 200
				;** Registers Changed	: ebx,eax,ecx,edx
				;**
				;*************************************************************************
				
 000001FB			DisplayMedian PROC
 000001FB  55				push ebp
 000001FC  8B EC			mov  ebp, esp
 000001FE  8B 75 0C			mov  esi, [ebp + 12]		
 00000201  8B 45 08			mov	 eax, [ebp + 8]	
 00000204  BA 00000000			mov  edx, 0
 00000209  BB 00000002			mov	 ebx, 2
 0000020E  F7 F3			div	 ebx
 00000210  8B C8			mov	 ecx, eax
				
 00000212				medianLoop:
 00000212  83 C6 04				add	esi, 4
 00000215  E2 FB				loop medianLoop
				
					; check if remainder is zero
 00000217  83 FA 00				cmp	edx, 0
 0000021A  74 09				jz EvenNumber
				
					;OddNumber
 0000021C  8B 06				mov	eax, [esi]
 0000021E  A3 00000004 R			mov	median, eax
 00000223  EB 13				jmp	PrintMedian
				
 00000225				EvenNumber:
 00000225  8B 06				mov	eax, [esi]
 00000227  03 46 FC				add	eax, [esi-4]
 0000022A  BB 00000002				mov	ebx, 2
 0000022F  F7 F3				div	ebx
 00000231  A3 00000004 R			mov	median,eax
 00000236  EB 00				jmp	PrintMedian
						
 00000238				PrintMedian:
 00000238  BA 0000048A R			mov	edx, OFFSET output3
 0000023D  E8 00000000 E			call WriteString
 00000242  A1 00000004 R			mov	eax, median
 00000247  E8 00000000 E			call WriteDec
 0000024C  E8 00000000 E			call CrLf
					
 00000251  5D				pop  ebp
 00000252  C2 0008			ret  8
 00000255			DisplayMedian ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    05/28/17 16:34:43
"Assignment 2     (assignment2.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004B0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000255 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AddArray . . . . . . . . . . . .	P Near	 00000136 _TEXT	Length= 00000028 Public STDCALL
  AddLoop  . . . . . . . . . . .	L Near	 0000013F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayList  . . . . . . . . . .	P Near	 0000015E _TEXT	Length= 00000040 Public STDCALL
  DisplayLoop  . . . . . . . . .	L Near	 0000016C _TEXT	
  DropLine . . . . . . . . . . .	L Near	 0000018A _TEXT	
  Next . . . . . . . . . . . . .	L Near	 0000019A _TEXT	
DisplayMedian  . . . . . . . . .	P Near	 000001FB _TEXT	Length= 0000005A Public STDCALL
  medianLoop . . . . . . . . . .	L Near	 00000212 _TEXT	
  EvenNumber . . . . . . . . . .	L Near	 00000225 _TEXT	
  PrintMedian  . . . . . . . . .	L Near	 00000238 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Exchange . . . . . . . . . . . .	P Near	 000001DC _TEXT	Length= 0000001F Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetData  . . . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000048 Public STDCALL
  EnterNumberLoop  . . . . . . .	L Near	 000000F4 _TEXT	
  Error  . . . . . . . . . . . .	L Near	 00000121 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000132 _TEXT	
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 0000003D Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SortList . . . . . . . . . . . .	P Near	 0000019E _TEXT	Length= 0000003E Public STDCALL
  OutsideLoop  . . . . . . . . .	L Near	 000001A8 _TEXT	
  InsideLoop . . . . . . . . . .	L Near	 000001AD _TEXT	
  Swap . . . . . . . . . . . . .	L Near	 000001BD _TEXT	
  Next . . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B1 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER  . . . . . . . . . . . . .	Number	 0000000Ah   
MAX  . . . . . . . . . . . . . .	Number	 000003E7h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 00000064h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBERROW  . . . . . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SIZEARRAY  . . . . . . . . . . .	Number	 000000C8h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER  . . . . . . . . . . . . .	Number	 000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayNumber  . . . . . . . . . .	DWord	 00000014 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counterRow . . . . . . . . . . .	DWord	 00000010 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input  . . . . . . . . . . . . .	Byte	 0000042A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
many . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
median . . . . . . . . . . . . .	DWord	 00000004 _DATA	
num  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
output1  . . . . . . . . . . . .	Byte	 0000045E _DATA	
output2  . . . . . . . . . . . .	Byte	 0000046C _DATA	
output3  . . . . . . . . . . . .	Byte	 0000048A _DATA	
output4  . . . . . . . . . . . .	Byte	 00000499 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
save . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
space  . . . . . . . . . . . . .	Byte	 000004AB _DATA	
title1 . . . . . . . . . . . . .	Byte	 00000334 _DATA	
title2 . . . . . . . . . . . . .	Byte	 00000364 _DATA	
title3 . . . . . . . . . . . . .	Byte	 000003A5 _DATA	
title4 . . . . . . . . . . . . .	Byte	 000003E2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
